sys*Para visualizar las particiones del sistema ejecutamos el comando:
$lsblk
*La diferencia entre aptitude y apt 
Apt(Advanced Package Tool) es una herramienta que utilizamos para descargar programas pero aptitude en este sentido tiene una mayor cantidad de herramientas para optimizar/realizar las operaciones.

*SUDO
_____________________________________________________________
Desde el root instalamos la herramienta sudo
$su -					#Para acceder al root
$apt install sudo			#Para instalar sudo
$adduser <username> sudo		#Para añadir un usuario al grupo sudo
$getent group sudo			#Para obotener los usuarios pertenecientes al grupo mencionado
No olvidarme de darme permisos para ejecutar el sudo en <nombre_usuario>
$visudo #Añadir <user_name>    ALL=(ALL) ALL


$sudo visudo	#Para acceder a un archivo al que le pondremos las siguientes condiciones
Y dentro del archivo establecemos los siguientes datos
Defaults        passwd_tries=3					#Numero de intentos
Defaults        badpass_message="<custom-error-message>".	#Mensaje customizable
Defaults        logfile="/var/log/sudo/sudo.logs"		#Donde guardaremos los logs
Defaults        log_input,log_output 				#Donde queremos archivar lo que hagamos con sudo
Defaults        iolog_dir="/var/log/sudo" 			#Donde se alojan los resultados
Defaults        requiretty 					#Solo se puede acceder con sudo desde la terminal
Defaults        secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"

/var/log/sudo/sudo.logs
$sudo nano /var/log/auth.log #Para ver los logs cuando ejecutamos sudo 




*Servicio SSH
_____________________________________________________________

El servivio ssh es un servicio de terminal remota, en ella que te puedes conectar remotamente desde otro terminal .
$sudo apt install openssh-server	#Para instalar el servicio SSH
$sudo nano /etc/ssh/sshd_config #Para configurar el puerto 4242 y que no se pueda acceder al root por ssh
$systemctl status ssh 		#Comprueba el estado del servicio

Nos conectamos desde una terminal nueva con el comando.
$hostname -I
$ssh user@serverIP -p 4242 #Para conectarse desde una terminal ajena
Introducimos la contraseña y estaremos dentro.

*Firewall(UFW)
_____________________________________________________________
EL servicio UFW es un servicio que se utiliza como cortafuegos en Ubuntu.
Lo instalamos utilizando el siguiente comando:
$sudo apt install ufw
Lo establecemos con el comando:
$sudo ufw enable
Permitimos conexiones desde el puerto 4242
$sudo ufw allow 4242
Combrobamos el status con el comando:
$sudo ufw status verbose

*HOSTNAME
_____________________________________________________________

$uname -vm #informmacion del sistema
$ hostnamectl 					#Visualiza el hostname actual
$ hostnamectl set-hostname <new_hostname>	#Establecemos el nuevo nombre
$ sudo nano /etc/hosts				#Cambiamos el hostname aqui tambien


*PASSWORD POLICYs
_____________________________________________________________

Cambiamos las politicas básicas de contraseñas con el comando :
$sudo nano /etc/login.defs
Y ponemos 30 dias máximos y 2 minimos.
Instalamos un paquete para mejorar el control de contraseñas con el comando :
$sudo apt-get install libpam-pwquality
$sudo nano /etc/pam.d/common-password
Y añadimos al final de la linea :
password requisite pam_pwquality.so retry=3  minlen=10 ucredit=-1 dcredit=-1 maxrepeat=3 reject_username enforce_for_root difok=7 

*USUARIOS
______________________________________________________________

$cat /etc/passwd 			#Para ver todos los usuarios en el ordenador(manera bruta)
$getent passwd | cut -d ":" -f 1 	#Para ver todos los usuarios en el ordenador más simplemente
$getent passwd <user_name>		#Para comprobar si el usuario introducido existe
$useradd <username>
$passwd <username>
Userdel <user name> -r 			#Para borrar el usuario


$groups <user name> #Para ver los grupos asociados a un usuario
$groupadd <new group name> #Para crear un grupo
$groupdel <group name> #Para eliminar un grupo 
$gpasswd -a <user name> <group name> #Para añadir un usuario al grupo
$gpasswd -d <user name> <group name> #Para booras un usuario del grupo


*CRONTAB
______________________________________________________________
Configuramos el crontab del root con el comando :

Instalamos las herramientas necesarias
$ sudo apt-get update -y
$ sudo apt-get install -y net-tools

Añadimos una regla que lo ejecute sin el sudo password
$sudo visudo

$sudo crontab -u root -e

Y añadimos la linea para ejecutar el script en la dirección especificada
@reboot/10 /path/to/script
*/10 * * * * sh /path/to/script 

El comando sudo crontab -l muestra como configurar el cron

Para acceder al script del Crontab que usamos
$sudo nano /bin/monitoring.sh


*BONUS
_______________________________________________________________
La instalación se realizo manualmente al inicio así que no hay mucho problema con eso


- Lighttpd: Es un servidor web sencillo de montar , en el que configuraremos los siguientes pasos
	$sudo apt install lighttpd 	#Para instalar el servicio
	$sudo ufw allow 80		#Lighttpd utiliza el puerto 80 por defecto así que le asignaremos ese.
	$systemctl start lighttpd 	#Iniciamos el programa
	$systemctl enable lighttpd 	#Hacemos que se inicie al iniciar el ordenador
	$systemctl status lighttpd 	#Comprueba el estado del servidor

- MariaDB: Sistema de gestión de bases de datos. El webserver va a acceder a esta base de datos para mostrar 
	las distintas páginas web que pudiesemos crear. Esta basado en el SQL estático.
	$sudo apt install mariadb-server 	#Para instalar el servicio
	$sudo mysql_secure_installation 	#Configuramos la instalacion, eliminando ciertas opciones inseguras como
		Switch to unix_socket authentication [Y/n]: Y			#Permite conectar con el unix socket, que maneja con seguridad las conexiones entre procesos.
		Enter current password for root (enter for none): Enter		#Establecemos una contraseña para el root de la Base de Datos.
		Set root password? [Y/n]: Y					#Establecemos una contraseña para el root de la Base de Datos.
		New password: Password
		Re-enter new password: Password
		Remove anonymous users? [Y/n]: Y 				#Elimina el acceso de usuarios anónimos por motivos de seguridad.
		Disallow root login remotely? [Y/n]: Y				#Eliminamos el login de root por seguridad extra.
		Remove test database and access to it? [Y/n]:  Y		#Elimina la base de datos de prueba pues no la necesitamos.
		Reload privilege tables now? [Y/n]:  Y				#Guarda los datos.

	$systemctl restart mariadb		#Restart para aplicar cambios
		$sudo mariadb 			#Entro en la consola del mariaDB para configurarlo
			CREATE DATABASE <data_base_name>; 								#Creamos una Base de DATOS.
			CREATE USER "<user_name>@<hostname(el que termina en 42)>" IDENTIFIED BY "<password>";		#Creamos un usuario con contraseña
			GRANT ALL ON <data_base_name>.* TO "<user_name>@<hostname(el que termina en 42)>" 		#El .* da acceso a todas las tablas de la base de datos
				IDENTIFIED BY "<password> WITH GRANT OPTION; 															
			FLUSH PRIVILEGES; 										#Aplicamos los cambios
			EXIT												#Salimos de maridar
		sudo mariadb -u "<user_name>@<hostname>" -p 	#Entramos en la Base de Datos
			SHOW DATABASES;				#Comprobamos que el usuario tenga los permisos.	

	Si salta un error llamado unit mariadb-server.service could not be found prueba a sustituirlo con el comando alternativo que puse yo.
	$systemctl start mariadb-server / $systemctl start mysql 	#Iniciar el programa
	$systemctl enable mariadb-server / $systemctl enable mysql	#Hacemos que se inicie al iniciar el ordenador
	$systemctl status mariadb-server / $systemctl status mysql	#Comprueba el estado de la Base de Datos

- PHP: Es un lenguaje de scripts para servidores. Las funciones de Wordpress lo usan.
		$sudo apt install php-cgi php-mysql 	#Instalamos los dos modulos necesarios

- Wordpress: Instalo el propio wordpress. Es un Content Manager System (CMS). Permite crear blogs y webs.
		sudo apt install wget
		sudo wget http://wordpress.org/latest.tar.gz -P /var/www/html #Descargo la ultima version de Wordpress
		sudo tar -xzvf /var/www/html/latest.tar.gz 	#Extraigo el .tar, lo extraigo, copio el contenido en 
		sudo rm /var/www/html/latest.tar.gz			#/var/www/html y borro el tar y el original extraido
		sudo cp -r wordpress/* /var/www/html
		sudo rm -rf wordpress
		sudo cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php	#Uso la config de prueba
		sudo vi /var/www/html/wp-config.php		#Cambio la configuracion para linkearla con la database de MariaDB
			define( 'DB_NAME', 'database_name_here' );
			define( 'DB_USER', 'username_here' );
			define( 'DB_PASSWORD', 'password_here' );

-Configuracion Lighttpd
		sudo lighty-enable-mod fastcgi		#Activo los modulos fastcgi. Es un protocolo para conexiones de 
		sudo lighty-enable-mod fastcgi-php 	#aplicaciones a servidores web
		sudo service lighttpd force-reload



PARTE 2 BONUS

	FAIL2BAN

	- Fail2ban: Se trata de un servicio de protección extra. Entre otras cosas, permite bloquear las ips de aquellos 
	usuarios que hayan intentado conectarse de forma fallida mediante ssh tras un numero determinado de intentos.
		sudo apt install fail2ban
		systemctl start fail2ban
		cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local		#Creamos una version local de la configuracion
			#Cambiamos la configuracion en JAILS, despues de mode=normal añadiendo:
				enabled = true
				maxretry = 3
				findtime = 10m
				bantime = 10m
				port = 4242
			#Cambiamos tambien los puertos de dropbear y selinux-ssh a 4242, ya que es la que usa nuestro ssh.
			#Hay que cambiar los puertos tambien en el jail.conf
		systemctl restart fail2ban
		systemctl status fail2ban

		fail2ban-client status				#Checkeo de los status y las ip baneadas
		fail2ban-client status sshd
		tail -f /var/log/fail2ban.log


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Clonar en la siguiente dirección
/sgoinfre/students/mortiz-d/born2beroot

















